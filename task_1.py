"""
На языке Python написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.

Пример:

def isEven(value):
      return value % 2 == 0
"""


def isEven(value):
    """
    Примерная функция
    """
    return value % 2 == 0


def is_even(value: int) -> bool:
    """
    Предложенная функция
    """
    return not (value & 1)


if __name__ == "__main__":
    for i in range(0, 5):
        print(f"is_even({i}) = {is_even(i)} \t isEven({i}) = {isEven(i)}")

"""
Предложенная процедура определяет нечётность числа путём побитового сравнения с единицей. Всё нечётные числа в двоичной записи имеют единицу в младшем разряде, которая и отлавливается побитовым сравнением.
После побитового И результат инвертируется, чтобы соответствовать функции из примера, возвращающей True, если число чётное.

Плюс предложенного решения -- побитовые операции быстрее, чем поиск остатка от деления.
Преимущества решения из примера в его очевидности и лёгкости для понимания.
"""